package org.scoula.advice;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;

import java.util.Arrays;

@Aspect
@Slf4j
@Component
public class LogAdvice2 {

    // 1. Í∏∞Î≥∏ Î°úÍπÖ - Î©îÏÑúÎìú Ïã§Ìñâ Ï†Ñ
    @Before("execution(* org.scoula.sample.service.SampleService*.*(..))")
    public void logBefore() {
        log.info("==================== METHOD START ====================");
    }

    // 2. ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÏ†Å - ÌäπÏ†ï Î©îÏÑúÎìúÏùò ÌååÎùºÎØ∏ÌÑ∞ Ï∫°Ï≤ò
    @Before("execution(* org.scoula.sample.service.SampleService*.doAdd(String, String)) && args(str1, str2)")
    public void logBeforeWithParam(String str1, String str2) {
        log.info("üì• INPUT PARAMETERS:");
        log.info("  ‚îú‚îÄ str1: {}", str1);
        log.info("  ‚îî‚îÄ str2: {}", str2);
    }

    // 3. Ï†ïÏÉÅ ÏôÑÎ£å Ïãú Í≤∞Í≥º Î°úÍπÖ
    @AfterReturning(
            pointcut = "execution(* org.scoula.sample.service.SampleService*.*(..))",
            returning = "result"
    )
    public void logAfterReturning(Object result) {
        log.info("‚úÖ SUCCESS RESULT: {}", result);
    }

    // 4. ÏòàÏô∏ Î∞úÏÉù Ïãú Ï≤òÎ¶¨
    @AfterThrowing(
            pointcut = "execution(* org.scoula.sample.service.SampleService*.*(..))",
            throwing = "exception"
    )
    public void logException(Exception exception) {
        log.error("‚ùå EXCEPTION OCCURRED:");
        log.error("  ‚îú‚îÄ Type: {}", exception.getClass().getSimpleName());
        log.error("  ‚îî‚îÄ Message: {}", exception.getMessage());
    }

    // 5. Î©îÏÑúÎìú ÏôÑÎ£å Ïãú (Ï†ïÏÉÅ/ÏòàÏô∏ Î¨¥Í¥Ä)
    @After("execution(* org.scoula.sample.service.SampleService*.*(..))")
    public void logAfter() {
        log.info("==================== METHOD END ===================");
    }

    // 6. Ï¢ÖÌï© Î™®ÎãàÌÑ∞ÎßÅ - Ïã§Ìñâ ÏãúÍ∞Ñ Î∞è ÏÉÅÏÑ∏ Ï†ïÎ≥¥
    @Around("execution(* org.scoula.sample.service.SampleService*.*(..))")
    public Object logTime(ProceedingJoinPoint pjp) throws Throwable {
        String className = pjp.getTarget().getClass().getSimpleName();
        String methodName = pjp.getSignature().getName();
        Object[] args = pjp.getArgs();

        log.info("üöÄ STARTING EXECUTION:");
        log.info("  ‚îú‚îÄ Class: {}", className);
        log.info("  ‚îú‚îÄ Method: {}", methodName);
        log.info("  ‚îî‚îÄ Arguments: {}", Arrays.toString(args));

        long startTime = System.currentTimeMillis();
        Object result = null;

        try {
            result = pjp.proceed(); // Ïã§Ï†ú Î©îÏÑúÎìú Ïã§Ìñâ
            return result;
        } catch (Throwable e) {
            log.error("üí• EXECUTION FAILED: {}", e.getMessage());
            throw e; // ÏòàÏô∏Î•º Îã§Ïãú ÎçòÏ†∏ÏÑú Ï†ïÏÉÅÏ†ÅÏù∏ ÏòàÏô∏ Ï≤òÎ¶¨ ÌùêÎ¶Ñ Ïú†ÏßÄ
        } finally {
            long endTime = System.currentTimeMillis();
            long executionTime = endTime - startTime;

            log.info("‚è±Ô∏è  EXECUTION TIME: {}ms", executionTime);

            // ÏÑ±Îä• Í≤ΩÍ≥† (100ms Ïù¥ÏÉÅ ÏÜåÏöî Ïãú)
            if (executionTime > 100) {
                log.warn("üêå SLOW EXECUTION DETECTED: {}.{} took {}ms",
                        className, methodName, executionTime);
            }
        }
    }
}
